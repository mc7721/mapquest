{
    "openapi": "3.0.0",
    "info": {
        "version": "",
        "title": "MapQuest Search API: Place Search",
        "description": "Place Search is a spatially-aware search engine most commonly used to return Point of Interest (POI) results near a geographic point of reference or within a geographic boundary, such as 'find all coffee shops within the extent of the current map.' Results can be ordered by distance or relevance. This API complements the Search Ahead API by performing the backend search necessary to fulfill category or franchise requests.",
        "termsOfService": ""
    },
    "servers": [
        "httpswww.mapquestapi.com\/"
    ],
    "paths": {
        "\/search\/v4\/place": {
            "get": {
                "summary": "Search for places with optional geographic and categorical contexts.",
                "description": "Get a list of search results ordered by relevance or distance from a spatial reference point, optionally filtered by category, and optionally bounded within a geographic constraint.",
                "operationId": "GetAListOfSearchResultsOrderedByRelevanceOrDistanceFromASpatialReferencePointOptiona",
                "deprecated": 0,
                "parameters": [
                    {
                        "name": "location",
                        "in": "query",
                        "description": "A geographic context used for searching, ranking, and ordering results. Must consist of two comma-separated floating-point values: the longitude, latitude; the first coordinate must lie in the range [-180, 180], and the second must lie in the range [-90, 90]. Note: 'sort=distance' requires a location; if bounding with a circle\/bbox and no location is specified, the center of the circle\/bbox will be used by default."
                    },
                    {
                        "name": "category",
                        "in": "query",
                        "description": "The categories of places to search over. Must consist of a comma-separated list of values, specified with 'sic:' followed by the alphanumeric code. Valid codes include any 'sic' values returned by the Search Ahead API, as well as six-digit North American Industry Classification System (NAICS) codes. Required if q is not specified."
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "The scheme used to order results. Must be 'distance' or 'relevance'. Note: 'sort=distance' requires a location; if bounding with a circle\/bbox and no location is specified, the center of the circle\/bbox will be used by default. If a location is detected in the 'q' parameter with 'sort=relevance', the location may influence relevance scoring. 'sort=importance' was available as a sorting option in the initial version of the API, but this option has been deprecated in favor of 'sort=relevance'. 'so"
                    },
                    {
                        "name": "feedback",
                        "in": "query",
                        "description": ""
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "A valid and authorized MapQuest API key."
                    },
                    {
                        "name": "circle",
                        "in": "query",
                        "description": "A geographic circle used to bound the search. Only places within the bound will be returned in results. Must consist of three comma-separated floating-point values: the longitude and latitude of the circle's center, and the radius in meters; the first coordinate must lie in the range [-180, 180], the second must lie in the range [-90, 90], and the radius must lie in the range [0, 800000]. Note: only one of 'circle' and 'bbox' may be specified."
                    },
                    {
                        "name": "bbox",
                        "in": "query",
                        "description": "A geographic rectangle used to bound the search. Only places within the bound will be returned in results. Must consist of four comma-separated floating-point values: the longitude and latitude of the lower-left corner followed by the longitude and latitude of the upper-right corner; longitudes must lie in the range [-180, 180], and latitudes must lie in the range [-90, 90]. Note: only one of 'circle' and 'bbox' may be specified."
                    },
                    {
                        "name": "corridor",
                        "in": "query",
                        "description": "A collection of points defining a route used for the search. Must consist of two or more arrays of floating-point longitude, latitude values. Longitudes must lie in the range [-180, 180], and latitudes must lie in the range [-90, 90]. Example: [-120.5,10.1],[-119.4,10.3] Note: Corridor cannot be used with 'location' or 'sort=distance'."
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "description": "The number of results to return per page. Must lie in the range [1, 50]. Default if unspecified: 10. Note: the starting result number on the requested page must be between 1 and 500, so the maximum allowed value for 'pageSize' could in practice be less than 50, depending on the value of 'page'."
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "(Deprecated.) A synonym for 'pageSize', with the same semantics and constraints. If both 'pageSize' and 'limit' are specified, 'pageSize' takes precedence."
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "The page within the result set to return, where 'pageSize' determines the page size. Must lie in the range [1, 500], and the starting result number on the requested page must be between 1 and 500. Default if unspecified: 1."
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "description": "A query phrase. Results returned from the Points of Interest dataset will best match the provided query phrase (string) and location (if provided). Required if a category is not specified. Examples: 'Starbucks, Denver CO' or 'hotels'"
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Error": {
                "type": "object",
                "properties": {
                    "error": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "StreetAddress": {
                "type": "object",
                "properties": {
                    "city": {
                        "description": "",
                        "type": "get"
                    },
                    "countryCode": {
                        "description": "",
                        "type": "get"
                    },
                    "county": {
                        "description": "",
                        "type": "get"
                    },
                    "neighborhood": {
                        "description": "",
                        "type": "get"
                    },
                    "postalCode": {
                        "description": "",
                        "type": "get"
                    },
                    "stateCode": {
                        "description": "",
                        "type": "get"
                    },
                    "street": {
                        "description": "",
                        "type": "get"
                    },
                    "type": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "Feedback": {
                "type": "object",
                "properties": {
                    "resultClickedUrl": {
                        "description": "",
                        "type": "get"
                    },
                    "resultViewedUrl": {
                        "description": "",
                        "type": "get"
                    },
                    "mapResultClickedUrl": {
                        "description": "",
                        "type": "get"
                    },
                    "mapResultViewedUrl": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "Pagination": {
                "type": "object",
                "properties": {
                    "currentPage": {
                        "description": "",
                        "type": "get"
                    },
                    "nextUrl": {
                        "description": "",
                        "type": "get"
                    },
                    "previousUrl": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "PlaceFeature": {
                "type": "object",
                "properties": {
                    "geometry": {
                        "description": "",
                        "type": "get"
                    },
                    "type": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "SearchRequest": {
                "type": "object",
                "properties": {
                    "circle": {
                        "description": "",
                        "type": "get"
                    },
                    "bbox": {
                        "description": "",
                        "type": "get"
                    },
                    "corridor": {
                        "description": "",
                        "type": "get"
                    },
                    "category": {
                        "description": "",
                        "type": "get"
                    },
                    "pageSize": {
                        "description": "",
                        "type": "get"
                    },
                    "page": {
                        "description": "",
                        "type": "get"
                    },
                    "location": {
                        "description": "",
                        "type": "get"
                    },
                    "q": {
                        "description": "",
                        "type": "get"
                    },
                    "sort": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "SearchResponse": {
                "type": "object",
                "properties": {
                    "results": {
                        "description": "",
                        "type": "get"
                    }
                }
            },
            "SearchResult": {
                "type": "object",
                "properties": {
                    "displayString": {
                        "description": "",
                        "type": "get"
                    },
                    "id": {
                        "description": "",
                        "type": "get"
                    },
                    "language": {
                        "description": "",
                        "type": "get"
                    },
                    "name": {
                        "description": "",
                        "type": "get"
                    },
                    "slug": {
                        "description": "",
                        "type": "get"
                    }
                }
            }
        }
    }
}